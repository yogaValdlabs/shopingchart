(function ($) {

	$.fn.obSetupForm = function () {
		return $(this).each(function (i, el) {
			var $el = $(el);

			// Skip this if we've already set up the form
			if ($el.is('.thim-widget-form-main')) {
				if ($el.data('sow-form-setup') == true)
					return true;
				if ($('body').hasClass('widgets-php') && !$el.is(':visible'))
					return true;

				// Lets set up the preview
				$el.obSetupPreview();
			}

			// Find any field or sub widget fields.
			var $fields = $el.find('> .thim-widget-field');

			// Process any sub sections
			$fields.find('> .thim-widget-section').obSetupForm();

			// Store the field names
			$fields.find('.thim-widget-input').each(function (i, input) {
				if ($(input).data('original-name') == null) {
					$(input).data('original-name', $(input).attr('name'));
				}
			});

			// Setup all the repeaters
			$fields.find('> .thim-widget-field-repeater').obSetupRepeater();

			// For any repeater items currently in existence
			$el.find('.thim-widget-field-repeater-item').obSetupRepeaterActions();

			//// Set up any color fields
			//$fields.find('> .tp-colorpicker').wpColorPicker()
			// Set up any color fields
			$fields.find('> .thim-widget-input-color').wpColorPicker()
				.closest('.thim-widget-field').find('a').click(function(){
					if(typeof $.fn.dialog != 'undefined') {
						$(this).closest('.panel-dialog').dialog("option", "position", "center");
					}
				});

			// handle the media field. Check that this is working
			$fields.find('> .media-field-wrapper').each(function () {
				var $media = $(this);
				// Handle the media uploader
				$media.find('a.media-upload-button').click(function (event) {
					if (typeof wp.media == 'undefined')
						return;

					var $$ = $(this);
					var $c = $(this).closest('.thim-widget-field');
					var frame = $(this).data('frame');

					// If the media frame already exists, reopen it.
					if (frame) {
						frame.open();
						return false;
					}

					// Create the media frame.
					frame = wp.media({
						// Set the title of the modal.
						title: $$.data('choose'),
						// Tell the modal to show only images.
						library: {
							type: $$.data('library').split(',').map(function (v) {
								return v.trim()
							})
						},
						// Customize the submit button.
						button: {
							// Set the text of the button.
							text: $$.data('update'),
							// Tell the button not to close the modal, since we're
							// going to refresh the page when the image is selected.
							close: false
						},
						//multiple : true
 					});

					// Store the frame
					$$.data('frame', frame);

					// When an image is selected, run a callback.
					frame.on('select', function () {
						// Grab the selected attachment.
						var attachment = frame.state().get('selection').first().attributes;

						$c.find('.current .title').html(attachment.title);
						$c.find('input[type=hidden]').val(attachment.id);

						if (typeof attachment.sizes != 'undefined') {
							if (typeof attachment.sizes.thumbnail != 'undefined')
								$c.find('.current .thumbnail').attr('src', attachment.sizes.thumbnail.url).fadeIn();
							else
								$c.find('.current .thumbnail').attr('src', attachment.sizes.full.url).fadeIn();
						}
						else {
							$c.find('.current .thumbnail').attr('src', attachment.icon).fadeIn();
						}

						frame.close();
					});

					// Finally, open the modal.
					frame.open();

					return false;
				});

				// Show/hide the remove button when hovering over the media select button.
				$media
					.mouseenter(function () {
						if ($(this).closest('.thim-widget-field').find('input[type=hidden]').val() != '')
							$(this).find('.media-remove-button').fadeIn('fast');
					})
					.mouseleave(function () {
						$(this).find('.media-remove-button').fadeOut('fast');
					})

				$media.find('.current')
					.mouseenter(function () {
						var t = $(this).find('.title');
						if (t.html() != '') {
							t.fadeIn('fast');
						}
					})
					.mouseleave(function () {
						$(this).find('.title').clearQueue().fadeOut('fast');
					})

				$media.find('a.media-remove-button')
					.click(function () {
						var $$ = $(this).closest('.thim-widget-field');
						$$.find('.current .title').html('');
						$$.find('input[type=hidden]').val('');
						$$.find('.current .thumbnail').fadeOut('fast');
						$(this).fadeOut('fast');
					});

			})
	
			/* Multi Media */
			// handle the media field. Check that this is working
			$fields.find('> .multi-media-field-wrapper').each(function () {
				var $media = $(this);
				var $ulist = $media.find(".media-content");
				$ulist.sortable({
					items: 'li',
					update: function () {
						var $vl = $ulist.sortable('toArray').toString();
						$media.closest('.thim-widget-field').find('input[type=hidden]').val($vl);
					}
				});

				// Handle the media uploader
				$media.find('a.media-upload-button').click(function (event) {
					if (typeof wp.media == 'undefined')
						return;

					var $$ = $(this);
					var $c = $(this).closest('.thim-widget-field');
					var frame = $(this).data('frame');

					// If the media frame already exists, reopen it.
					if (frame) {
						frame.open();
						return false;
					}

					// Create the media frame.
					frame = wp.media({
						// Set the title of the modal.
						title: $$.data('choose'),
						// Tell the modal to show only images.
						library: {
							type: $$.data('library').split(',').map(function (v) {
								return v.trim()
							})
						},
						// Customize the submit button.
						button: {
							// Set the text of the button.
							text: $$.data('update'),
							// Tell the button not to close the modal, since we're
							// going to refresh the page when the image is selected.
							close: false
						},
						multiple : true
 					});

					// Store the frame
					$$.data('frame', frame);

					// When an image is selected, run a callback.
					frame.on('select', function () {
						// Grab the selected attachment.
						var selection = frame.state().get('selection');
						$val = "";
						selection.map( function( attachment ) {
						    attachment = attachment.toJSON();
						    if (!$val)
						    	$val += attachment.id;
						    else $val += ","+attachment.id;
						    $media.find(".media-content").append('<li id="'+attachment.id+'" class="current"><div class="thumbnail-wrapper"><img src="'+attachment.sizes.full.url+'" class="thumbnail"><a href="#" class="media-remove-button">Remove></a></div></li');
						});
						var $vl = $ulist.sortable('toArray').toString();
						$media.closest('.thim-widget-field').find('input[type=hidden]').val($vl);

						frame.close();
					});

					// Finally, open the modal.
					frame.open();

					return false;
				});

				// Show/hide the remove button when hovering over the media select button.
				$media
					.mouseenter(function () {
						if ($(this).closest('.thim-widget-field').find('input[type=hidden]').val() != '')
							$(this).find('.media-remove-button').fadeIn('fast');
					})
					.mouseleave(function () {
						$(this).find('.media-remove-button').fadeOut('fast');
					})

				$media.find('.current')
					.mouseenter(function () {
						var t = $(this).find('.title');
						if (t.html() != '') {
							t.fadeIn('fast');
						}
					})
					.mouseleave(function () {
						$(this).find('.title').clearQueue().fadeOut('fast');
					})

				$media.find('a.media-remove-button')
					.click(function () {
						$(this).closest('li').remove();
						var $vl = $ulist.sortable('toArray').toString();
						$media.closest('.thim-widget-field').find('input[type=hidden]').val($vl);
					});

			});
			
			// Handle toggling of the sub widget form
			$fields.filter('.thim-widget-field-type-widget, .thim-widget-field-type-section').find('> label').click(function () {
				var $$ = $(this);
				$(this).toggleClass('thim-widget-section-visible');
				$(this).siblings('.thim-widget-section').slideToggle(function () {

					// Center the PB dialog
					if (typeof $.fn.dialog != 'undefined') {
						$(this).closest('.panel-dialog').dialog("option", "position", "center");
					}
				});
			});

			$('body').on('change', '.tp-radio-image input', function () {
				var $this = $(this),
					type = $this.attr('type'),
					selected = $this.is(':checked'),
					$parent = $this.parent(),
					$others = $parent.siblings();
				if (selected) {
					$parent.addClass('tp-radio-active');
					type == 'radio' && $others.removeClass('tp-radio-active');
				}
				else {
					$parent.removeClass('tp-radio-active');
				}
			});
			$('.tp-radio-image input').trigger('change');

			//// Handle the icon selection
			//var iconWidgetCache = {};
			//$fields.find('> .thim-widget-icon-selector').each(function () {
			//    var $is = $(this);
			//    var $v = $is.find('.thim-widget-icon-icon');
			//
			//    var rerenderIcons = function () {
			//        var family = $is.find('select.thim-widget-icon-family').val();
			//        var container = $is.find('.thim-widget-icon-icons');
			//
			//        if (typeof iconWidgetCache[family] == 'undefined')
			//            return;
			//
			//        container.empty();
			//
			//        if ($('#' + 'thim-widget-font-' + family).length == 0) {
			//
			//            $("<link rel='stylesheet' type='text/css'>")
			//                    .attr('id', 'thim-widget-font-' + family)
			//                    .attr('href', iconWidgetCache[family]['style_uri'])
			//                    .appendTo('head');
			//        }
			//
			//
			//        for (var i in iconWidgetCache[family]['icons']) {
			//
			//            var icon = $('<div data-sow-icon="' + iconWidgetCache[family]['icons'][i] + '"/>')
			//                    .attr('data-value', family + '-' + i)
			//                    .addClass('sow-icon-' + family)
			//                    .addClass('thim-widget-icon-icons-icon')
			//                    .click(function () {
			//                        var $$ = $(this);
			//                        if ($$.hasClass('thim-widget-active')) {
			//                            $$.removeClass('thim-widget-active');
			//                            $v.val('');
			//                        }
			//                        else {
			//                            container.find('.thim-widget-icon-icons-icon').removeClass('thim-widget-active');
			//                            $$.addClass('thim-widget-active');
			//                            $v.val($(this).data('value'));
			//                        }
			//                    });
			//
			//            if ($v.val() == family + '-' + i)
			//                icon.addClass('thim-widget-active');
			//
			//            container.append(icon);
			//        }
			//
			//        // Move a selcted item to the first position
			//        container.prepend(container.find('.thim-widget-active'));
			//    }
			//
			//    // Create the function for changing the icon family and call it once
			//    var changeIconFamily = function () {
			//        // Fetch the family icons from the server
			//        var family = $is.find('select.thim-widget-icon-family').val();
			//        if (typeof family == 'undefined' || family == '')
			//            return;
			//
			//        if (typeof iconWidgetCache[family] == 'undefined') {
			//            $.getJSON(
			//                    ajaxurl,
			//                    {'action': 'thim_widgets_get_icons', 'family': $is.find('select.thim-widget-icon-family').val()},
			//            function (data) {
			//                iconWidgetCache[family] = data;
			//                rerenderIcons()
			//            }
			//            );
			//        }
			//        else {
			//            rerenderIcons();
			//        }
			//    }
			//    changeIconFamily();
			//
			//    $is.find('select.thim-widget-icon-family').change(function () {
			//        $is.find('.thim-widget-icon-icons').empty();
			//        changeIconFamily();
			//    });
			//
			//});

			$fields.filter('.thim-widget-field-type-slider').each(function(){
				var $$ = $(this);
				var $input = $$.find('input[type="number"]');
				var $c = $$.find('.thim-widget-value-slider');

				$c.slider({
					max: parseInt( $input.attr('max') ),
					min: parseInt( $input.attr('min') ),
					value: parseInt( $input.val() ),
					step: 1,
					slide: function( event, ui ) {
						$input.val( parseInt(ui.value) );
						$$.find('.thim-widget-slider-value').html( ui.value );
					}
				});
			});
			// Give plugins a chance to influence the form
			$el.trigger('sowsetupform').data('sow-form-setup', true);
			$el.find('.thim-widget-field-repeater-item').trigger('updateFieldPositions');

			/********
			 * The end of the form setup.
			 *******/
		});
	};

	$.fn.obSetupPreview = function () {
		var $el = $(this);
		var previewButton = $el.siblings('.thim-widget-preview');

		previewButton.find('> a').click(function (e) {
			e.preventDefault();
			var data = {};

			$el.find('*[name]').each(function () {
				var $$ = $(this);
				var name = /[a-zA-Z\-]+\[[0-9]+\]\[(.*)\]/.exec($$.attr('name'));

				name = name[1];
				parts = name.split('][');

				// Make sure we either have numbers or strings
				parts = parts.map(function (e) {
					if (!isNaN(parseFloat(e)) && isFinite(e))
						return parseInt(e);
					else
						return e;
				});

				var sub = data;
				for (var i = 0; i < parts.length; i++) {
					if (i == parts.length - 1) {
						// This is the end, so we need to store the actual field value here
						if ($$.attr('type') == 'checkbox') {
							if ($$.is(':checked'))
								sub[ parts[i] ] = $$.val() != '' ? $$.val() : true;
						}
						else
							sub[ parts[i] ] = $$.val();
					}
					else {
						if (typeof sub[parts[i]] == 'undefined') {
							sub[parts[i]] = {};
						}
						// Go deeper into the data and continue
						sub = sub[parts[i]];
					}
				}
			});

			// Create the modal
			var overlay = $('<div class="thim-widgets-preview-modal-overlay"></div>').appendTo('body');
			var modal = $('<div class="thim-widgets-preview-modal"></div>').appendTo('body');
			var close = $('<div class="thim-widgets-preview-close dashicons dashicons-no"></div>').appendTo(modal);
			var iframe = $('<iframe class="thim-widgets-preview-iframe" scrolling="no"></iframe>').appendTo(modal);

			$.post(
				ajaxurl,
				{
					'action': 'so_widgets_preview',
					'data': JSON.stringify(data),
					'class': $el.data('class')
				},
				function (html) {
					iframe.contents().find('body').html(html);
				}
			);

			close.add(overlay).click(function () {
				overlay.remove();
				modal.remove();
			});
		});
	}

	$.fn.obSetupRepeater = function () {

		return $(this).each(function (i, el) {
			var $el = $(el);
			var $items = $el.find('.thim-widget-field-repeater-items');
			var name = $el.data('repeater-name');

			$items.bind('updateFieldPositions', function () {
				var $$ = $(this);

				// Set the position for the repeater items
				$$.find('> .thim-widget-field-repeater-item').each(function (i, el) {
					$(el).find('.thim-widget-input').each(function (j, input) {
						var pos = $(input).data('repeater-positions');
						if (typeof pos == 'undefined') {
							pos = {};
						}

						pos[name] = i;
						$(input).data('repeater-positions', pos);
					});
				});

				// Update the field names for all the input items
				$$.find('.thim-widget-input').each(function (i, input) {
					var pos = $(input).data('repeater-positions');
					var $in = $(input);

					if (typeof pos != 'undefined') {
						var newName = $in.data('original-name');

						if (typeof newName == 'undefined') {
							$in.data('original-name', $in.attr('name'));
							newName = $in.attr('name');
						}

						for (var k in pos) {
							newName = newName.replace('#' + k + '#', pos[k]);
						}
						$(input).attr('name', newName);
					}
				});

			});

			$items.sortable({
				handle: '.thim-widget-field-repeater-item-top',
				items: '> .thim-widget-field-repeater-item',
				update: function () {
					$items.trigger('updateFieldPositions');
				}
			});
			$items.trigger('updateFieldPositions');

			$el.find('> .thim-widget-field-repeater-add').disableSelection().click(function (e) {
				e.preventDefault();
				$el.closest('.thim-widget-field-repeater')
					.obAddRepeaterItem()
					.find('> .thim-widget-field-repeater-items').slideDown('fast');

				// Center the PB dialog
				if (typeof $.fn.dialog != 'undefined') {
					$(this).closest('.panel-dialog').dialog("option", "position", "center");
				}

			});

			$el.find('> .thim-widget-field-repeater-top > .thim-widget-field-repeater-expend').click(function (e) {
				e.preventDefault();
				$el.closest('.thim-widget-field-repeater').find('> .thim-widget-field-repeater-items').slideToggle('fast');
			});
		});
	};

	$.fn.obAddRepeaterItem = function () {
		return $(this).each(function (i, el) {

			var $el = $(el);
			var theClass = $el.closest('.thim-widget-form').data('class');

			var formClass = $el.closest('.thim-widget-form').data('class');

			var item = $('<div class="thim-widget-field-repeater-item" />')
				.append(
				$('<div class="thim-widget-field-repeater-item-top" />')
					.append(
					$('<div class="thim-widget-field-expand" />')

				)
					.append(
					$('<div class="thim-widget-field-remove" />')

				)
					.append($('<h4 />').html($el.data('item-name')))
			)
				.append(
				$('<div class="thim-widget-field-repeater-item-form" />')
					.html(window.ob_repeater_html[formClass][$el.data('repeater-name')])
			)
				.obSetupRepeaterActions();

			// Add the item and refresh
			$el.find('> .thim-widget-field-repeater-items').append(item).sortable("refresh").trigger('updateFieldPositions');
			item.hide().slideDown('fast');

		});
	};

	$.fn.obSetupRepeaterActions = function () {
		return $(this).each(function (i, el) {
			var $el = $(el);

			if (typeof $el.data('sowrepeater-actions-setup') == 'undefined') {
				var top = $el.find('> .thim-widget-field-repeater-item-top');

				top.find('.thim-widget-field-expand')
					.click(function (e) {
						e.preventDefault();
						$(this).closest('.thim-widget-field-repeater-item').find('.thim-widget-field-repeater-item-form').eq(0).slideToggle('fast', function () {
							if (typeof $.fn.dialog != 'undefined') {
								$(this).closest('.panel-dialog').dialog("option", "position", "center");
							}
						});
					});

				top.find('.thim-widget-field-remove')
					.click(function (e) {
						e.preventDefault();
						if (confirm(soWidgets.sure)) {
							var $s = $(this).closest('.thim-widget-field-repeater-items');
							$(this).closest('.thim-widget-field-repeater-item').slideUp('fast', function () {
								$(this).remove();
								$s.sortable("refresh").trigger('updateFieldPositions');
							});
						}
					});

				$el.find('> .thim-widget-field-repeater-item-form').obSetupForm();

				$el.data('sowrepeater-actions-setup', true);
			}
		});
	}

	// When we click on a widget top
	$('.widgets-holder-wrap').on('click', '.widget:has(.thim-widget-form-main) .widget-top', function () {
		var $$ = $(this).closest('.widget').find('.thim-widget-form-main');
		setTimeout(function () {
			$$.obSetupForm();
		}, 200);
	});

	// When we open a Page Builder widget dialog
	$(document).on('dialogopen', function (e) {
		$(e.target).find('.thim-widget-form-main').obSetupForm();
	});

	//$(document).ready(function ($) {
	//	$('.thim-widget-input-color').wpColorPicker();
	//});

	//$(document).ready(function ($) {
	//	$('.thim-widget-field-icon_type select').on('change', function () {
	//		alert("fuck");
	//		if ($(this).val() == "font-awesome") {
	//			$('.thim-options-font-awesome').show();
	//		} else {
	//			$('.thim-options-custom').show();
	//		}
	//	}).trigger('change');
	//});

})(jQuery);